---
# tasks file for microk8s

- name: Install microk8s
  community.general.snap:
    name: microk8s
    channel: "{{ channel }}"
    classic: true
  register: installation

- name: Install dns addon
  ansible.builtin.command: "microk8s enable dns:{{ dns_server }}"
  when: execute_dns
  
- name: Install rbac addon
  ansible.builtin.command: "microk8s enable rbac"

- name: Install hostpath-storage addon
  ansible.builtin.command: "microk8s enable hostpath-storage"

- name: Install ingress addon
  ansible.builtin.command: "microk8s enable ingress"

- name: Patch ingress to allow for ssl passthrough
  ansible.builtin.command: "microk8s kubectl patch daemonset nginx-ingress-microk8s-controller --namespace ingress --type=json -p '[{\"op\": \"replace\", \"path\": \"/spec/template/spec/containers/0/args\", \"value\": [\"/nginx-ingress-controller\", \"--configmap=$(POD_NAMESPACE)/nginx-load-balancer-microk8s-conf\", \"--tcp-services-configmap=$(POD_NAMESPACE)/nginx-ingress-tcp-microk8s-conf\", \"--udp-services-configmap=$(POD_NAMESPACE)/nginx-ingress-udp-microk8s-conf\", \"--ingress-class=public\", \"--publish-status-address=127.0.0.1\", \"--enable-ssl-passthrough\"]}]'"

- name: Install cert-manager addon
  ansible.builtin.command: "microk8s enable cert-manager"

- name: Install metrics-server addon
  ansible.builtin.command: "microk8s enable metrics-server"

- name: Setup node ports
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/args/kube-apiserver
    regexp: '^--service-node-port-range'
    line: "--service-node-port-range {{service_node_port_range}}"
  register: node_ports

- name: Setup hostname for certificates
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    insertafter: '^DNS.5 = kubernetes.default.svc.cluster.local$'
    line: "DNS.6 = {{ansible_hostname}}.hutter.cloud"
  register: dns_6

- name: stop microk8s
  ansible.builtin.command: "microk8s stop"
  when: installation.changed or node_ports.changed or dns_6.changed

- name: start microk8s
  ansible.builtin.command: "microk8s start"
  when: installation.changed or node_ports.changed or dns_6.changed

- name: render microk8s configuration file
  ansible.builtin.command: "microk8s config"
  register: microk8s_config

- name: write microk8s config to localhost
  ansible.builtin.copy:
    content: "{{ microk8s_config.stdout }}"
    dest: "../../{{ inventory_hostname }}.kubeconfig"
  delegate_to: localhost